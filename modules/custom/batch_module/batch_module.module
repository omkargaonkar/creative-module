<?php

/**
 * @file
 * Outlines how a module can use the Batch API.
 */

/**
 * Process of batch.
 */
function batch_module_batch_process($operation_details, $options_key, $options_check_key, &$context) {
  // Use the $context['sandbox'] to store the
  // information needed to track progression between successive calls.
  if (empty($context['sandbox'])) {
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    // Save node count for the termination message.
    $context['sandbox']['max'] = db_query("SELECT COUNT(DISTINCT nid) FROM {node}")->fetchField();
  }
  $limit = $options_key;
  $result = db_select('node', 'n')
   ->fields('n', array('nid'))
   ->orderBy('n.nid', 'ASC')
   ->where('n.nid > :nid', array(':nid' => $context['sandbox']['current_node']))
   ->range(0, $limit)
   ->execute();
   foreach ($result as $row) {
     // Here we actually perform our 'processing' on the current node.
     $node = node_load($row->nid);
     // set publish or unpublish node
     $node->status = $options_check_key;
     $node->save();
     // Store some results for post-processing in the 'finished' callback.
     // The contents of 'results' will be available as $results in the
     // 'finished' function.
     $context['results'][] = $node->id() . ' ' . $operation_details;
     // Update our progress information.
     $context['sandbox']['progress']++;
     $context['sandbox']['current_node'] = $node->id();
     $context['message'] = t('Running Batch "@id" @details',
       ['@id' => $row, '@details' => $operation_details]
     );
   }
   // Inform the batch engine that we are not finished,
   // and provide an estimation of the completion level we reached.
   if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
     $context['finished'] = ($context['sandbox']['progress'] >= $context['sandbox']['max']);
   }
 }
 /**
  * Finished callback.
  */
 function batch_module_finished($success, $results, $operations) {
   if ($success) {
     // Display the number of nodes we processed...
     drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
   }
   else {
     // An error occurred.
     $error_operation = reset($operations);
     drupal_set_message(
       t('An error occurred while processing @operation with arguments : @args',
         array(
           '@operation' => $error_operation[0],
           '@args' => print_r($error_operation[0], TRUE),
         )
       ),
       'error'
     );
   }
 }
